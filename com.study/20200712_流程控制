#流程控制


####判断语句

*       判断语句：if
            if（关系表达式）{
                语句体;
            }
        执行流程
            1、判断关系表达式是true还是flase
            2、如果是true就执行语句体
            3、如果是flase就不执行语句体
        判断语句：if...else
            if（关系表达式）{
                语句体1;
            }else{
                语句体2;
            }
         执行流程
             1、判断关系表达式是true还是flase
             2、如果是true就执行语句体1
             3、如果是flase就执行语句体2
            
            
        判断语句：if...else if else
####选择语句
*       switch
            格式：
                switch(表达式){
                case 常量值1;
                    语句体1;
                    break;
                case 常量值2;
                    语句体2;
                    break;
                 ...
                default:
                    语句体n+1;
                    break;
                }
         执行流程：
            1、计算出表达式的值
            2、值和case依次比较，一旦有对应的值，就执行对应的语句体，执行中遇到break就会结束
            3、最后，如果所有的case都和表达式值不匹配，就会执行default语句体，然后结束程序
         注意：
            switch后面小括号当中只能是：
                基本数据类型 byte、short、char、int
                引用数据类型 String、enum枚举
####循环语句
         循环语句：for
         使用场景：重复做一件事，次数还比较固定
         循环结构的基础组成部分，一般可分为四部分：
                1、初始化语句，在循环开始最初执行，而且只做唯一一次
                2、条件判断，如果成立则循环继续，如果不成立，则循环退出
                3、循环体，重复要做的事情内容，若干行语句
                4、步进语句，每次循环之后都要进行的扫尾工作
         格式：
                for(初始化表达式1;布尔表达式2;步进表达式4){
                    循环体3;
                }
         执行流程
            执行顺序：1234>234>234...2不满足为止
            1负责完成循环变量初始化
            2负责判断是否满足循环条件，不满足则跳出循环
            3具体执行的语句
            4循环后，循环条件所涉及变量的变化情况
         eg:

            for(int i=1;i<=100;i++){
                System.out.println("输出"+i)
            }
####while循环
         标准格式：
                 while(条件判断){
                    循环体
                 }
         扩展格式：
                 初始化语句1;
                 while(条件判断2){
                    循环体3;
                    步进语句4;
                 }
         执行流程：
            执行顺序：1234>234>234...2不满足为止
            1负责完成循环变量初始化
            2负责判断是否满足循环条件，不满足则跳出循环
            3具体执行的语句
            4循环后，循环条件所涉及变量的变化情况
         eg:
            int i=1;
            while(i<=100){
                System.out.println(“输出”+i)
                i++;
            }
####do-while循环
        do...while循环格式:
                初始化表达式1
                    do{
                    循环体3
                    步进表达式4
                }while{布尔表达式2}
        执行流程：
               执行顺序：134>234>234...2不满足为止
               1负责完成循环变量初始化
               2负责判断是否满足循环条件，不满足则跳出循环
               3具体执行的语句
               4循环后，循环条件所涉及变量的变化情况
        eg:
            int i=1;
            do{
                System.out.println("输出"+i)
                i++;
            }while{i<=100};



*           break关键字的用法：
                1、在switch语句中，一旦执行，整个switch语句立刻结束
                2、在循环语句中，一旦执行，整个循环语句立刻结束，打断循环

*           continue关键字的用法：
                一旦执行，立刻跳过当前次循环剩余内容，马上开始下一次循环
                场景：电梯
                for（int i =1;i<=10;i++）{
                    if(i==4){//如果当前等于4
                        continue;//跳过当前次循环，马上开始下一次循环
                    }
                    System.out.println(i+"层到了")

                }

*           死循环
                while(True){
                    循环体
                }
